// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// EDM_multi
List EDM_multi(const NumericVector& Z, int min_size = 24, double beta = 0, int degree = 0);
RcppExport SEXP BreakoutDetection_EDM_multi(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP betaSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type Z(ZSEXP );
        Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP );
        Rcpp::traits::input_parameter< double >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< int >::type degree(degreeSEXP );
        List __result = EDM_multi(Z, min_size, beta, degree);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EDM_multi
List EDM_multi_a(const NumericVector& Z, int min_size = 24, int min_rsize = 12, double beta = 0, int degree = 0);
RcppExport SEXP BreakoutDetection_EDM_multi_a(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP min_rsizeSEXP, SEXP betaSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type Z(ZSEXP );
        Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP );
		Rcpp::traits::input_parameter< int >::type min_rsize(min_rsizeSEXP );
        Rcpp::traits::input_parameter< double >::type beta(betaSEXP );
        Rcpp::traits::input_parameter< int >::type degree(degreeSEXP );
        List __result = EDM_multi_a(Z, min_size, min_rsize, beta, degree);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EDM_percent
List EDM_percent(const NumericVector& Z, int min_size = 24, double percent = 0, int degree = 0);
RcppExport SEXP BreakoutDetection_EDM_percent(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP percentSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type Z(ZSEXP );
        Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP );
        Rcpp::traits::input_parameter< double >::type percent(percentSEXP );
        Rcpp::traits::input_parameter< int >::type degree(degreeSEXP );
        List __result = EDM_percent(Z, min_size, percent, degree);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EDM_tail
List EDM_tail(NumericVector& Z, int min_size = 24, double alpha = 2, double quant = 0.5);
RcppExport SEXP BreakoutDetection_EDM_tail(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP alphaSEXP, SEXP quantSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector& >::type Z(ZSEXP );
        Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP );
        Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< double >::type quant(quantSEXP );
        List __result = EDM_tail(Z, min_size, alpha, quant);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EDMX
List EDMX(const NumericVector& Z, int min_size = 24, double alpha = 2);
RcppExport SEXP BreakoutDetection_EDMX(SEXP ZSEXP, SEXP min_sizeSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type Z(ZSEXP );
        Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP );
        Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP );
        List __result = EDMX(Z, min_size, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
